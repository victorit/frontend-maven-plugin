name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: "Run build"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Use cache
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-maven3-
            
      # Configure java to version 17
      - name: Configure Java
        uses: actions/setup-java@v4.5.0
        with:
          java-version: "17"
          distribution: temurin
          
      - name: Cache SonarQube dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      # Run SunarQube Scanner
      - name: Run SonarQube Scanner
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
         SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
         SONAR_URL: https://sonarcloud.io
        run: |
          mvn clean verify sonar:sonar -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.token=$SONAR_TOKEN -Dsonar.exclusions=target/**,bin/**,**/*.class
          
      # Upload SonarQube to GitHub Insight
      - name: Upload SonarQube results to GitHub Insights
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          entryPoint: "/entrypoint.sh"
          args: |
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=frontend-maven-plugin/target/classes
            -Dsonar.exclusions=target/**,bin/**,**/*.class
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

 
      # Build project
      - name: "Run Maven"
        shell: bash
        run: mvn clean install --batch-mode -PintegrationTests
      
      
      # Create project
      - name: Package
        run: mvn -B clean package -DskipTests

      # Set up JFrog CLI
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: 2.72.2
      # JFrog Xray Scan
      - name: JFrog CLI
        env:
          JFROG_URL: https://trialkl8y5h.jfrog.io/artifactory
          JFROG_USER: ${{ secrets.ARTIFACTORY_USER }}
          JFROG_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          #jfrog config add exam-server --url="$JFROG_URL" --user="$JFROG_USER" --password="$JFROG_PASSWORD" --interactive=false
          #jfrog config show
          jfrog rt u "frontend-maven-plugin/target/*.jar" "exam-snapshot/" --build-name="my-build" --build-number="1" --url="$JFROG_URL" --user="$JFROG_USER" --password="$JFROG_PASSWORD"
          jfrog rt bp "my-build" "1" --url="$JFROG_URL" --user="$JFROG_USER" --password="$JFROG_PASSWORD"
          jfrog rt bs "my-build" "1" --url="$JFROG_URL" --user="$JFROG_USER" --password="$JFROG_PASSWORD" --fail
